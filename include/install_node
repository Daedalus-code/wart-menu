#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config
source /etc/wart-menu/include/color

################################################################################

# check if wart-node.service needs updating
if ! grep -q "$WARTHOG_CHAIN" /etc/systemd/system/wart-node.service ||
  ! grep -q "$WARTHOG_PEERS" /etc/systemd/system/wart-node.service ||
  ! grep -q "$WARTHOG_API" /etc/systemd/system/wart-node.service; then
  printf '%b' "[${G1}OK${N0}] Found new configuration!\n"
  # remove old file
  sudo rm -f /etc/systemd/system/wart-node.service
fi

################################################################################

clear
# if missing
if [[ ! -f /etc/systemd/system/wart-node.service ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Stopping wart node..\n"
  # start node
  sudo service wart-node stop &>/dev/null
  # output service file
  printf '%b' "[${G1}OK${N0}] Installing/Updating wart-node.service..\n"
  sleep 1
  # service data
  echo "[Unit]
Description=Warthog Node

[Service]
WorkingDirectory=$WARTHOG_DIR/node
ExecStart=$WARTHOG_DIR/node/wart-node --rpc=$WARTHOG_API --chain-db=$WARTHOG_CHAIN --peers-db=$WARTHOG_PEERS
Restart=always

[Install]
WantedBy=multi-user.target" >/tmp/wrnsrv.tmp
  # install service
  sudo mv /tmp/wrnsrv.tmp /etc/systemd/system/wart-node.service
  printf '%b' "[${G1}OK${N0}] daemon-reload..\n"
  # reload
  sudo systemctl daemon-reload
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null && rm /tmp/ltrwr.tmp &>/dev/null && rm /tmp/rnwr.tmp &>/dev/null
  printf '%b' "[${G1}OK${N0}] Restarting wart-node..\n"
  # start node
  sudo service wart-node start
fi

################################################################################

# install check
if [[ ! -d "$WARTHOG_DIR"/node ]] &>/dev/null; then

  clear
  # update system
  sudo apt update
  sudo apt install git
  sudo apt install build-essential meson ninja-build
  # git clone
  cd || exit && git clone https://github.com/warthog-network/Warthog
  # change directory
  cd Warthog
  # build
  meson build --buildtype=release
  # change directory
  cd build || exit

  ##############################################################################

  # if total memory are less than 2GB
  SYSTEM_MEMORY="$(echo "$(grep "MemTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }')/1024" | bc 2>/dev/null)"
  SYSTEM_SWAP="$(echo "$(grep "SwapTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }')/1024" | bc 2>/dev/null)"

  if [[ "$(echo "$SYSTEM_MEMORY+$SYSTEM_SWAP" | bc 2>/dev/null)" -lt "2000" ]] &>/dev/null; then
    if dialog --stdout --title "Memory: ${SYSTEM_MEMORY}MB" \
      --backtitle "Need more memory!" \
      --yesno "Create 2GB swapfile?" 5 28; then
      # get size from build trials
      SWAP_SIZE="2G"
      # default /swapfile
      SWAP_PATH="/swapfile"
      if [ ! -z "$2" ]; then
        SWAP_PATH="$2"
      fi
      # create swap
      sudo fallocate -l "$SWAP_SIZE $SWAP_PATH" # allocate size
      sudo chmod 600 "$SWAP_PATH"               # set proper permission
      sudo mkswap "$SWAP_PATH"                  # setup swap
      sudo swapon "$SWAP_PATH"                  # enable swap
      # if missing
      if [[ "$(grep -c "swap" /etc/fstab)" -eq "0" ]] &>/dev/null; then
        # add to fstab
        echo "$SWAP_PATH   none    swap    sw    0   0" | sudo tee /etc/fstab -a
      fi
    fi
  fi

  ##############################################################################

  # start counting (seconds)
  START="$SECONDS"
  # ninja -j threads
  NINJA_THREADS="$(echo "$(cat /proc/cpuinfo 2>/dev/null | grep -c "processor")-1" | bc 2>/dev/null)"
  # ninja -j"minus one thread"
  ninja -j"$NINJA_THREADS"
  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))

  read -r -p "Build time: $TIMER_FORMATTED with $NINJA_THREADS Core(s) $CPU_TEMP
Press Enter to continue" </dev/tty
fi

# END
