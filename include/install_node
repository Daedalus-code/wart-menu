#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config
source /etc/wart-menu/include/color

################################################################################

# check if wart-node.service needs updating
if ! grep -q "$WARTHOG_CHAIN" /etc/systemd/system/wart-node.service ||
  ! grep -q "$WARTHOG_PEERS" /etc/systemd/system/wart-node.service ||
  ! grep -q "$WARTHOG_API" /etc/systemd/system/wart-node.service; then
  printf '%b' "[${G1}OK${N0}] Found new configuration!\n"
  # remove old file
  sudo rm -f /etc/systemd/system/wart-node.service
fi

# if any data
if [[ -n "$WARTHOG_STRATUM" ]] &>/dev/null; then
  # check if wart-node.service needs updating
  if ! grep -q "$WARTHOG_STRATUM" /etc/systemd/system/wart-node.service; then
    printf '%b' "[${G1}OK${N0}] Found new configuration!\n"
    # remove old file
    sudo rm -f /etc/systemd/system/wart-node.service
  fi
fi

################################################################################

clear
# if missing
if [[ ! -f /etc/systemd/system/wart-node.service ]] &>/dev/null; then
  printf '%b' "[${G1}OK${N0}] Stopping wart node..\n"
  # stop node
  sudo service wart-node stop &>/dev/null
  # output service file
  printf '%b' "[${G1}OK${N0}] Installing/Updating wart-node.service..\n"
  sleep 1

  # execStart
  SERVICE_START="ExecStart=$WARTHOG_DIR/node/wart-node --rpc=$WARTHOG_API --chain-db=$WARTHOG_CHAIN --peers-db=$WARTHOG_PEERS"
  # if zero
  if [[ -z "$WARTHOG_STRATUM" ]] &>/dev/null; then
    # normal node
    WARTHOG_EXECSTART="$SERVICE_START"
  fi
  # if any data
  if [[ -n "$WARTHOG_STRATUM" ]] &>/dev/null; then
    # node + solo mining
    WARTHOG_EXECSTART="$SERVICE_START --stratum=$WARTHOG_STRATUM"
  fi

  # service data
  echo "[Unit]
Description=Warthog Node

[Service]
WorkingDirectory=$WARTHOG_DIR/node
$WARTHOG_EXECSTART
Restart=always

[Install]
WantedBy=multi-user.target" >/tmp/wrnsrv.tmp
  # install service
  sudo mv /tmp/wrnsrv.tmp /etc/systemd/system/wart-node.service
  printf '%b' "[${G1}OK${N0}] daemon-reload..\n"
  # daemon-reload
  sudo systemctl daemon-reload
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null && rm /tmp/ltrwr.tmp &>/dev/null && rm /tmp/rnwr.tmp &>/dev/null
fi

################################################################################

# if node missing
if [[ ! -d "$WARTHOG_DIR"/node ]] &>/dev/null; then

  # start counting (seconds)
  START="$SECONDS"

  # update and install necessary packages
  sudo apt-get update
  sudo apt-get install bison build-essential flex git libgmp-dev libmpc-dev libmpfr-dev meson ninja-build pip texinfo wget -y

  # check available core(s)
  echo "$(mpstat -P ALL 2>/dev/null)" >/tmp/mpst.tmp
  # cpu core count
  CPU_CORES="$(cat /tmp/mpst.tmp 2>/dev/null | egrep -o "([0-9]+ CPU)" | awk '{ print $1 }')"
  # cpu cores with more than 50% in idle (available for building)
  CPU_CORES_AVAILABLE="$(cat /tmp/mpst.tmp 2>/dev/null | awk 'NR > 4 && $NF > 50 {count++} END {print count}')"
  printf '%b' "Found ${CY}$CPU_CORES${N0} core(s) with ${G1}$CPU_CORES_AVAILABLE${N0} available for building.\n"

  # gcc-11 or greater not installed ############################################
  GCC_VERSION=$(gcc -dumpversion | cut -d. -f1)
  # less than required
  if [ "$GCC_VERSION" -lt "11" ]; then
    # set gcc version
    GCC_VERSION="11.2.0"
    # create a directory for the gcc source and change to it
    mkdir -p ~/gcc-build &>/dev/null
    cd ~/gcc-build
    # download the gcc source code
    wget https://ftp.gnu.org/gnu/gcc/gcc-"$GCC_VERSION"/gcc-"$GCC_VERSION".tar.gz
    # extract the downloaded tarball
    tar -xvzf gcc-"$GCC_VERSION".tar.gz
    cd gcc-"$GCC_VERSION" || exit
    # download prerequisites for the build
    ./contrib/download_prerequisites
    # create a build directory outside the source tree
    cd ..
    mkdir build-gcc &>/dev/null
    cd build-gcc || exit
    # configure the gcc build
    ../gcc-"$GCC_VERSION"/configure --prefix=/usr/local --enable-languages=c,c++ --disable-multilib
    # compile gcc
    make -j"$CPU_CORES_AVAILABLE"
    # install gcc
    sudo make install
    # manually add it
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/local/bin/gcc 100
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/local/bin/g++ 100
    # verify the installation
    gcc --version
  fi

  ##############################################################################

  # git clone
  cd || exit && git clone https://github.com/warthog-network/Warthog
  # change directory
  cd Warthog
  # upgrade meson
  pip install --upgrade meson
  # build
  meson build --buildtype=release
  # change directory
  cd build || exit
  # ninja -j"minus one thread"
  ninja -j"$CPU_CORES_AVAILABLE"

  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))

  # if zero
  if [[ "$DURATION" -eq "0" ]] &>/dev/null; then
    TIMER_FORMATTED="None"
  fi

  ##############################################################################

  # if total memory are less than 2GB
  SYSTEM_MEMORY="$(echo "$(grep "MemTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }')/1024" | bc 2>/dev/null)"
  SYSTEM_SWAP="$(echo "$(grep "SwapTotal" /proc/meminfo 2>/dev/null | awk '{ print $2 }')/1024" | bc 2>/dev/null)"

  if [[ "$(echo "$SYSTEM_MEMORY+$SYSTEM_SWAP" | bc 2>/dev/null)" -lt "2000" ]] &>/dev/null; then
    if dialog --stdout --title "Memory: ${SYSTEM_MEMORY}MB" --backtitle "Need more memory!" \
      --yesno "Create 2GB swapfile?" 5 28; then
      # get size from build trials
      SWAP_SIZE="2G"
      # default /swapfile
      SWAP_PATH="/swapfile"
      if [ ! -z "$2" ]; then
        SWAP_PATH="$2"
      fi
      # create swap
      sudo fallocate -l "$SWAP_SIZE $SWAP_PATH" # allocate size
      sudo chmod 600 "$SWAP_PATH"               # set proper permission
      sudo mkswap "$SWAP_PATH"                  # setup swap
      sudo swapon "$SWAP_PATH"                  # enable swap
      # if missing
      if [[ "$(grep -c "swap" /etc/fstab)" -eq "0" ]] &>/dev/null; then
        # add to fstab
        echo "$SWAP_PATH   none    swap    sw    0   0" | sudo tee /etc/fstab -a
      fi
    fi
  fi

  ##############################################################################

  read -r -p "Build time: $TIMER_FORMATTED with $CPU_CORES_AVAILABLE Core(s) $CPU_TEMP

Press Enter to continue" </dev/tty
fi

################################################################################

if [[ "$(pidof wart-node | wc -l)" -eq "0" ]]; then
  # start node
  printf '%b' "[${G1}OK${N0}] Restarting wart-node..\n"
  sudo service wart-node start
fi

# END
