#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config
source /etc/wart-menu/include/color
source /etc/wart-menu/include/install_node

# function to display help #####################################################
print_help() {
  # help
  RESULT="$("$WARTHOG_DIR"/node/./wart-node --help)"
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }
  display_result
}

################################################################################

# remove old files
remove_pid_temp() {
  rm /tmp/pdown.tmp &>/dev/null
}

################################################################################

# update wallet data
update_wallet_data() {
  echo "$(curl -s "$WARTHOG_API"/peers/ip_count 2>/dev/null | wc -l)" >/tmp/wprs.tmp
  echo "$(curl -s "$WARTHOG_API"/peers/banned 2>/dev/null | egrep -c "[0-9]+")" >/tmp/wbnd.tmp
  echo "$(curl -s "$WARTHOG_API"/chain/head 2>/dev/null)" >/tmp/whd.tmp
}

# if missing
if [[ ! -f /tmp/wprs.tmp || ! -f /tmp/wbnd.tmp || ! -f /tmp/whd.tmp ]] &>/dev/null; then
  update_wallet_data
fi

# system date
DATE="$(date '+%s' 2>/dev/null)"
# wallet peers age
WALLET_PEERS="$(("$DATE" - $(stat -c '%Y' /tmp/wprs.tmp 2>/dev/null)))"
# wallet banned peers age
WALLET_BANNED="$(("$DATE" - $(stat -c '%Y' /tmp/wbnd.tmp 2>/dev/null)))"
# wallet head age
WALLET_HEAD="$(("$DATE" - $(stat -c '%Y' /tmp/whd.tmp 2>/dev/null)))"

# of missing, if old enough
if [[ "$WALLET_PEERS" -gt "60" || "$WALLET_BANNED" -gt "90" || "$WALLET_HEAD" -gt "120" ]] &>/dev/null; then
  update_wallet_data
fi

# wallet peers
WALLET_PEERS="$(cat /tmp/wprs.tmp 2>/dev/null)"
# wallet peers
WALLET_BANNED="$(cat /tmp/wbnd.tmp 2>/dev/null)"
# wallet synced
WALLET_SYNCED="$(grep "synced" /tmp/whd.tmp 2>/dev/null | awk '{ print $2 }' | tr -d ',')"
# wallet height
WALLET_HEIGHT="$(grep "height" /tmp/whd.tmp 2>/dev/null | awk '{ print $2 }' | tr -d ',')"

# if zero
if [[ -z "$WALLET_PEERS" ]] &>/dev/null; then
  WALLET_PEERS="0"
fi
# if true
if [[ "$WALLET_SYNCED" == "true" ]] &>/dev/null; then
  WALLET_SYNCED="OK"
else
  WALLET_SYNCED="..."
fi
# if zero
if [[ -z "$WALLET_HEIGHT" ]] &>/dev/null; then
  WALLET_HEIGHT="null"
fi

################################################################################

# if missing
if [[ ! -f /tmp/pdown.tmp ]] &>/dev/null; then
  echo "$(pidof wart-node 2>/dev/null)" >/tmp/pdown.tmp
fi

# pid age
PIDOF_WART_NODE_AGE=$(("$DATE" - $(stat -c '%Y' /tmp/pdown.tmp 2>/dev/null)))

# if old enough
if [[ "$PIDOF_WART_NODE_AGE" -gt "300" ]] &>/dev/null; then
  remove_pid_temp
fi

################################################################################

# update version data
update_version_data() {
  # latest release owner and repo
  OWNER="warthog-network"
  REPO="Warthog"
  # fetch the latest release tag from gitHub api
  echo "$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)" >/tmp/ltrwr.tmp
  # fetch wart-node version
  echo "$(cd "$WARTHOG_DIR"/node && ./wart-node --version | awk '{ print $2 }' | tr -d 'v')" >/tmp/rnwr.tmp
}

# if missing
if [[ ! -f /tmp/ltrwr.tmp || ! -f /tmp/rnwr.tmp ]] &>/dev/null; then
  update_version_data
fi

# release age
LATEST_RELEASE_AGE=$(("$DATE" - $(stat -c '%Y' /tmp/ltrwr.tmp 2>/dev/null)))
# installed age
INSTALLED_RELEASE_AGE=$(("$DATE" - $(stat -c '%Y' /tmp/rnwr.tmp 2>/dev/null)))

# if old enough
if [[ "$LATEST_RELEASE_AGE" -gt "3600" || "$INSTALLED_RELEASE_AGE" -gt "3600" ]] &>/dev/null; then
  update_version_data
fi

################################################################################

# installed and latest release
PIDOF_WART_NODE="$(cat /tmp/pdown.tmp 2>/dev/null)"
LATEST_RELEASE="$(cat /tmp/ltrwr.tmp 2>/dev/null)"
INSTALLED_RELEASE="$(cat /tmp/rnwr.tmp 2</dev/null)"
# does not copy
if [[ "$INSTALLED_RELEASE" -eq "$LATEST_RELEASE" ]] &>/dev/null; then
  NEW_RELEASE="-> v$LATEST_RELEASE!"
else
  NEW_RELEASE="OK"
fi
# if online
if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
  NODE_STATUS="Online"
else
  NODE_STATUS="Offline"
fi
# if zero
if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
  remove_pid_temp
fi

################################################################################

# system load
SYSTEM_LOAD="$(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"
# get process start time from /proc/[PID]/stat (22nd field)
START_TIME="$(awk '{print $22}' /proc/"$PIDOF_WART_NODE"/stat 2>/dev/null)"
# get system uptime in clock ticks
UPTIME_TICKS="$(getconf CLK_TCK)"
# convert start time to seconds
START_TIME_SECONDS="$((START_TIME / UPTIME_TICKS))"
# get total system uptime in seconds
SYSTEM_UPTIME="$(awk '{print $1}' /proc/uptime | cut -d. -f1)"
# calculate into days
SYSTEM_UPTIME_DAYS="$(echo "$SYSTEM_UPTIME/86400" | bc 2>/dev/null)"
# format output in hours, minutes and seconds
SYSTEM_UPTIME_FORMATTED="$(printf '%dh:%dm:%ds\n' $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%60")))"
# service uptime
WART_UPTIME=$(ps -p "$PIDOF_WART_NODE" -o etime= | awk -F'[:-]' '{sec = $NF;min = $(NF-1);hr = (NF>2) ? $(NF-2) : 0;day = (NF>3) ? $(NF-3) : 0;print (day*86400) + (hr*3600) + (min*60) + sec;}')
# calculate into days
WART_UPTIME_DAYS="$(echo "$WART_UPTIME/86400" | bc 2>/dev/null)"
# format output in hours, minutes and seconds
WART_UPTIME_FORMATTED="$(printf '%dh:%dm:%ds\n' $(("$(echo "${WART_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${WART_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${WART_UPTIME:?}" 2>&1)%60")))"

# if greater than n
if [[ "$SYSTEM_UPTIME_DAYS" -gt "1" ]] &>/dev/null; then
  SYSTEM_DAY_DAYS="Days"
else
  SYSTEM_DAY_DAYS="Day"
fi
# if greater than n
if [[ "$WART_UPTIME_DAYS" -gt "1" ]] &>/dev/null; then
  WART_DAY_DAYS="Days"
else
  WART_DAY_DAYS="Day"
fi

################################################################################

# cpu temp
THERMAL_ZONE="$(cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null)"
# if CPU temp exist
if [[ -n "$THERMAL_ZONE" ]] &>/dev/null; then
  # calculate cpu temp
  CPU_TEMP_CALCULATED="$(echo "$THERMAL_ZONE/1024" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"
  # output cpu temp
  CPU_TEMP="- CPU: ${CPU_TEMP_CALCULATED}Â°C"
else
  CPU_TEMP=""
fi

################################################################################

TITLE="Wart-Node Menu"
MENU="Load....: $SYSTEM_LOAD $CPU_TEMP
System..: $SYSTEM_UPTIME_DAYS $SYSTEM_DAY_DAYS - $SYSTEM_UPTIME_FORMATTED
Node....: $WART_UPTIME_DAYS $WART_DAY_DAYS - $WART_UPTIME_FORMATTED
Status..: $NODE_STATUS - Sync: $WALLET_SYNCED
Peers...: $WALLET_PEERS - Banned: $WALLET_BANNED
Version.: v$INSTALLED_RELEASE $NEW_RELEASE
Height..: $WALLET_HEIGHT"
CHOICE_HEIGHT="7"
HEIGHT="20"
WIDTH="46"

OPTIONS=(
  1 "Start            Run wart-node"
  2 "Stop             Kill wart-node"
  3 "Restart          Restart wart-node"
  4 "Status           Service status"
  5 "Config           wart-node.service"
  6 "Update           Update wart-node"
  7 "Help")

CHOICE=$(dialog --clear \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in
"1")
  # if zero
  if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
    remove_pid_temp
    sudo service wart-node start
  else
    printf '%b' "[${P1}OK${N0}] Node is running!\n"
    sleep 1
  fi
  ;;
"2")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    remove_pid_temp
    # stop wart-node
    sudo service wart-node stop
  else
    printf '%b' "[${P1}OK${N0}] Node is not running!\n"
    sleep 1
  fi
  ;;
"3")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    remove_pid_temp
    # stop wart-node
    sudo service wart-node restart
  else
    printf '%b' "[${P1}OK${N0}] Node is not running!\n"
    sleep 1
  fi
  ;;
"4")
  # display function
  display_result() {
    dialog --title "Wart-node.service status" \
      --no-collapse \
      --msgbox "$(service wart-node status)" 0 0
  }
  display_result
  ;;
"5") sudo nano /etc/systemd/system/wart-node.service ;;
"6")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # stop wart-node
    sudo service wart-node stop
  fi
  # start counting (seconds)
  START="$SECONDS"
  # ninja -j threads
  NINJA_THREADS="$(echo "$(grep -c "processor" /proc/cpuinfo 2>/dev/null)-1" | bc 2>/dev/null)"
  # change directory, ninja, -jall_threads-1 buffer thread
  cd || exit && cd Warthog && git pull && cd build || exit && ninja -j"$NINJA_THREADS"
  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>/dev/null)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
  printf '%b' "[${G1}OK${N0}] Build time: $TIMER_FORMATTED with $NINJA_THREADS Core(s) $CPU_TEMP\n"
  read -r -p "[!?] Press Enter to continue" </dev/tty
  ;;
"7") print_help ;;
esac

# END
