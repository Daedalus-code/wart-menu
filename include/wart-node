#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config
source /etc/wart-menu/include/data_usage

################################################################################

# check for changes for service that are ruled by configuration
if [[ "$(grep -c "$WARTHOG_CHAIN" /etc/systemd/system/wart-node.service)" -eq "0" || "$(grep -c "$WARTHOG_PEERS" /etc/systemd/system/wart-node.service)" -eq "0" || "$(grep -c "$WARTHOG_API" /etc/systemd/system/wart-node.service)" -eq "0" ]] &>/dev/null; then
  # remove old file
  sudo rm /etc/systemd/system/wart-node.service &>/dev/null
fi
clear
# if missing
if [[ ! -f /etc/systemd/system/wart-node.service ]] &>/dev/null; then
  echo "Found new configuration!"
  echo "Stopping any running nodes.."
  # start node
  sudo service wart-node stop &>/dev/null
  # output service file
  echo "Installing wart-node.service.."
  sleep 1
  # service data
  echo "[Unit]
Description=Warthog Node

[Service]
WorkingDirectory=$WARTHOG_DIR/node
ExecStart=$WARTHOG_DIR/node/wart-node --rpc=$WARTHOG_API --chain-db=$WARTHOG_CHAIN --peers-db=$WARTHOG_PEERS
Restart=always

[Install]
WantedBy=multi-user.target" >/tmp/wrnsrv.tmp
  # install service
  sudo mv /tmp/wrnsrv.tmp /etc/systemd/system/wart-node.service
  echo "daemon-reload.."
  # reload
  sudo systemctl daemon-reload
  # change directory
  cd src/node/ || exit
  echo "Restarting wart-node.."
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null && rm /tmp/ltrwr.tmp &>/dev/null && rm /tmp/rnwr.tmp &>/dev/null
  # start node
  sudo service wart-node restart
fi

################################################################################

# install check
if [[ ! -d "$WARTHOG_DIR"/node ]] &>/dev/null; then

  clear
  # update system
  sudo apt update
  sudo apt install git
  sudo apt install build-essential meson ninja-build
  # git clone
  cd || exit && git clone https://github.com/warthog-network/Warthog
  # change directory
  cd Warthog
  # build
  meson build --buildtype=release
  # change directory
  cd build || exit

  ##############################################################################

  # if total memory are less than 2GB
  SYSTEM_MEMORY="$(echo "$(cat /proc/meminfo 2>/dev/null | grep "MemTotal" | awk '{ print $2 }')/1024" | bc 2>/dev/null)"
  SYSTEM_SWAP="$(echo "$(cat /proc/meminfo 2>/dev/null | grep "SwapTotal" | awk '{ print $2 }')/1024" | bc 2>/dev/null)"
  if [[ "$(echo "$SYSTEM_MEMORY+$SYSTEM_SWAP" | bc 2>/dev/null)" -lt "2000" ]] &>/dev/null; then
    if dialog --stdout --title "Memory: ${SYSTEM_MEMORY}MB" \
      --backtitle "Need more memory!" \
      --yesno "Create 2GB swapfile?" 5 28; then
      # get size from build trials
      SWAP_SIZE="2G"
      # default /swapfile
      SWAP_PATH="/swapfile"
      if [ ! -z "$2" ]; then
        SWAP_PATH="$2"
      fi
      # create swap
      sudo fallocate -l "$SWAP_SIZE $SWAP_PATH" # allocate size
      sudo chmod 600 "$SWAP_PATH"               # set proper permission
      sudo mkswap "$SWAP_PATH"                  # setup swap
      sudo swapon "$SWAP_PATH"                  # enable swap
      # if missing
      if [[ "$(grep -c "swap" /etc/fstab)" -eq "0" ]] &>/dev/null; then
        # add to fstab
        echo "$SWAP_PATH   none    swap    sw    0   0" | sudo tee /etc/fstab -a
      fi
    fi
  fi

  ##############################################################################

  # start counting (seconds)
  START="$SECONDS"
  # ninja -j threads
  NINJA_THREADS="$(echo "$(cat /proc/cpuinfo 2>/dev/null | grep -c "processor")-1" | bc 2>/dev/null)"
  # ninja -j"minus one thread"
  ninja -j"$NINJA_THREADS"
  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
  read -r -p "Build time: $TIMER_FORMATTED with $NINJA_THREADS Core(s) $CPU_TEMP
Press Enter to continue" </dev/tty
fi

# function to display help #####################################################
print_help() {
  # help
  RESULT="$("$WARTHOG_DIR"/node/./wart-node --help)"
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }
  display_result
}

################################################################################

# latest release owner and repo
OWNER="warthog-network"
REPO="Warthog"

# file age (seconds)
PIDOF_WART_NODE_AGE="$(stat -c '%Y' /tmp/pdown.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"
LATEST_RELEASE_AGE="$(stat -c '%Y' /tmp/ltrwr.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"
INSTALLED_RELEASE_AGE="$(stat -c '%Y' /tmp/rnwr.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"

# if old enough
if [[ "$PIDOF_WART_NODE_AGE" -gt "300" ]] &>/dev/null; then
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null
fi
# if old enough
if [[ "$LATEST_RELEASE_AGE" -gt "3600" || "$INSTALLED_RELEASE_AGE" -gt "3600" ]] &>/dev/null; then
  # remove old files
  rm /tmp/ltrwr.tmp &>/dev/null && rm /tmp/rnwr.tmp &>/dev/null
fi
# if missing, fetch the latest release tag from gitHub api, fetch wart-node version
if [[ ! -f /tmp/ltrwr.tmp || ! -f /tmp/rnwr.tmp ]] &>/dev/null; then
  echo "$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)" >/tmp/ltrwr.tmp
  echo "$(cd "$WARTHOG_DIR"/node && ./wart-node --version | awk '{ print $2 }' | tr -d 'v')" >/tmp/rnwr.tmp
fi
# if missing
if [[ ! -f /tmp/pdown.tmp ]] &>/dev/null; then
  echo "$(pidof wart-node 2>/dev/null)" >/tmp/pdown.tmp
fi

# installed and latest release
PIDOF_WART_NODE="$(cat /tmp/pdown.tmp 2>/dev/null)"
LATEST_RELEASE="$(cat /tmp/ltrwr.tmp 2>/dev/null)"
INSTALLED_RELEASE="$(cat /tmp/rnwr.tmp 2</dev/null)"

# does not copy
if [[ "$INSTALLED_RELEASE" -eq "$LATEST_RELEASE" ]] &>/dev/null; then
  NEW_RELEASE="-> v$LATEST_RELEASE!"
else
  NEW_RELEASE="[OK]"
fi
# if online
if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
  NODE_STATUS="Online"
else
  NODE_STATUS="Offline"
fi
# if zero
if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null
fi

################################################################################

# system load
SYSTEM_LOAD="$(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"
# get process start time from /proc/[PID]/stat (22nd field)
START_TIME="$(awk '{print $22}' /proc/"$PIDOF_WART_NODE"/stat 2>/dev/null)"
# get system uptime in clock ticks
UPTIME_TICKS="$(getconf CLK_TCK)"
# convert start time to seconds
START_TIME_SECONDS="$((START_TIME / UPTIME_TICKS))"
# get total system uptime in seconds
SYSTEM_UPTIME="$(awk '{print $1}' /proc/uptime | cut -d. -f1)"
# calculate into days
SYSTEM_UPTIME_DAYS="$(echo "$SYSTEM_UPTIME/86400" | bc 2>/dev/null)"
# format output in hours, minutes and seconds
UPTIME_FORMATTED="$(printf '%dh:%dm:%ds\n' $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%60")))"
# service uptime
NODE_UPTIME="$(ps -p "$(pidof -s wart-node 2>/dev/null)" -o etime= 2>/dev/null)"

################################################################################

# if CPU temp exist
if [[ "$(cat /sys/class/thermal/thermal_zone*/temp 2>/dev/null | wc -l)" -gt "0" ]] &>/dev/null; then
  # calculate cpu temp
  CPU_TEMP_CALCULATED="$(echo "$(cat /sys/class/thermal/thermal_zone*/temp)/1024" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"
  # output cpu temp
  CPU_TEMP="Temp: ${CPU_TEMP_CALCULATED}Â°C"
else
  CPU_TEMP=""
fi

################################################################################

# memory info from /proc/meminfo
TOTAL_MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
FREE_MEM=$(grep MemFree /proc/meminfo | awk '{print $2}')
BUFFERS=$(grep Buffers /proc/meminfo | awk '{print $2}')
CACHED=$(grep ^Cached /proc/meminfo | awk '{print $2}')
USED_MEM=$((TOTAL_MEM - FREE_MEM - BUFFERS - CACHED))
# convert memory to MB
TOTAL_MEM_MB=$((TOTAL_MEM / 1024))
USED_MEM_MB=$((USED_MEM / 1024))
FREE_MEM_MB=$((FREE_MEM / 1024))
# swap memory info from /proc/meminfo
TOTAL_SWAP=$(grep SwapTotal /proc/meminfo | awk '{print $2}')
FREE_SWAP=$(grep SwapFree /proc/meminfo | awk '{print $2}')
USED_SWAP=$((TOTAL_SWAP - FREE_SWAP))
# convert swap to MB
TOTAL_SWAP_MB=$((TOTAL_SWAP / 1024))
USED_SWAP_MB=$((USED_SWAP / 1024))
FREE_SWAP_MB=$((FREE_SWAP / 1024))
# percentage
USED_MEM_PERCENTAGE="$(echo "100/$TOTAL_MEM_MB*$USED_MEM_MB" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"
USED_SWAP_PERCENTAGE="$(echo "100/$TOTAL_SWAP_MB*$USED_SWAP_MB" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"

################################################################################

TITLE="Wart-Node Menu"
MENU="Load...: $SYSTEM_LOAD $CPU_TEMP
Uptime.: $SYSTEM_UPTIME_DAYS Days - $UPTIME_FORMATTED
Memory.: ${USED_MEM_MB:?} MB / ${TOTAL_MEM_MB:?} MB ${USED_MEM_PERCENTAGE}%
SWAP...: ${USED_SWAP_MB:?} MB / ${TOTAL_SWAP_MB:?} MB ${USED_SWAP_PERCENTAGE}%
Node...: v$INSTALLED_RELEASE $NEW_RELEASE $NODE_UPTIME
Status.: $NODE_STATUS PID: $PIDOF_WART_NODE"
CHOICE_HEIGHT="8"
HEIGHT="20"
WIDTH="46"

OPTIONS=(
  1 "Start            Run wart-node"
  2 "Stop             Kill wart-node"
  3 "Restart          Restart wart-node"
  4 "Status           Service status"
  5 "Config           wart-node.service"
  6 "Update           Update wart-node"
  7 "Data             Data usage"
  8 "Help")

CHOICE=$(dialog --clear \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in
"1")
  # if zero
  if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # remove old files
    rm /tmp/pdown.tmp &>/dev/null
    sudo service wart-node start
  else
    echo "Already running!"
    sleep 1
  fi
  ;;
"2")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # remove old files
    rm /tmp/pdown.tmp &>/dev/null
    # stop wart-node
    sudo service wart-node stop
  else
    echo "Nothing to stop!"
    sleep 1
  fi
  ;;
"3")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # remove old files
    rm /tmp/pdown.tmp &>/dev/null
    # stop wart-node
    sudo service wart-node restart
  else
    echo "Nothing to restart!"
    sleep 1
  fi
  ;;
"4")
  # display function
  display_result() {
    dialog --title "Wart-node.service status" \
      --no-collapse \
      --msgbox "$(service wart-node status)" 0 0
  }
  display_result
  ;;
"5") sudo nano /etc/systemd/system/wart-node.service ;;
"6")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # stop wart-node
    sudo service wart-node stop
  fi
  # start counting (seconds)
  START="$SECONDS"
  # ninja -j threads
  NINJA_THREADS="$(echo "$(cat /proc/cpuinfo 2>/dev/null | grep -c "processor")-1" | bc 2>/dev/null)"
  # change directory, ninja, -jall_threads-1 buffer thread
  cd || exit && cd Warthog && git pull && cd build || exit && ninja -j"$NINJA_THREADS"
  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
  read -r -p "Build time: $TIMER_FORMATTED with $NINJA_THREADS Core(s) $CPU_TEMP
Press Enter to continue" </dev/tty
  ;;
"7") data_usage ;;
"8") print_help ;;
esac

# END
