#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config

################################################################################

# install check
if [[ ! -d "$WARTHOG_DIR"/node ]] &>/dev/null; then

  clear
  # update system
  sudo apt update
  sudo apt install git
  sudo apt install build-essential meson ninja-build
  # git clone
  cd || exit && git clone https://github.com/warthog-network/Warthog
  # change directory
  cd Warthog
  # build
  meson build --buildtype=release
  # change directory
  cd build || exit
  # ninja -j"minus one thread"
  ninja -j"$(echo "$(cat /proc/cpuinfo | grep -c "processor")-1" | bc 2>/dev/null)"
  # if missing
  if [[ ! -f /etc/systemd/system/wart-node.service ]] &>/dev/null; then
    # service data
    echo "[Unit]
Description=Warthog Node

[Service]
WorkingDirectory=/home/wart/Warthog/build/src/node
ExecStart=/home/wart/Warthog/build/src/node/wart-node --chain-db=/home/$USER/.warthog/chain.db3 --peers-db=/home/$USER/.warthog/peers.db3
Restart=always

[Install]
WantedBy=multi-user.target" >/tmp/wrnsrv.tmp
  fi
  # install service
  sudo mv /tmp/wrnsrv.tmp /etc/systemd/system/wart-node.service
  # reload
  sudo systemctl-reload
  # change directory
  cd src/node/ || exit
  # start node
  ./wart-node
fi

################################################################################

# latest release owner and repo
OWNER="warthog-network"
REPO="Warthog"

# file age (seconds)
PIDOF_WART_NODE_AGE="$(stat -c '%Y' /tmp/pdown.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"
LATEST_RELEASE_AGE="$(stat -c '%Y' /tmp/ltrwr.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"
INSTALLED_RELEASE_AGE="$(stat -c '%Y' /tmp/rnwr.tmp 2>/dev/null | while read lastedit; do echo "$(($(date +%s) - $lastedit))"; done)"

# if old enough
if [[ "$PIDOF_WART_NODE_AGE" -gt "300" ]] &>/dev/null; then
  # remove old files
  rm /tmp/pdown.tmp &>/dev/null
fi

# if old enough
if [[ "$LATEST_RELEASE_AGE" -gt "3600" || "$INSTALLED_RELEASE_AGE" -gt "3600" ]] &>/dev/null; then
  # remove old files
  rm /tmp/ltrwr.tmp &>/dev/null && rm /tmp/rnwr.tmp &>/dev/null
fi

# if missing, fetch the latest release tag from gitHub api, fetch wart-node version
if [[ ! -f /tmp/ltrwr.tmp || ! -f /tmp/rnwr.tmp ]] &>/dev/null; then
  echo "$(curl -s "https://api.github.com/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)" >/tmp/ltrwr.tmp
  echo "$(cd "$WARTHOG_DIR"/node && ./wart-node --version | awk '{ print $2 }' | tr -d 'v')" >/tmp/rnwr.tmp
fi
if [[ ! -f /tmp/pdown.tmp ]] &>/dev/null; then
  echo "$(pidof wart-node)" >/tmp/pdown.tmp
fi

# installed and latest release
PIDOF_WART_NODE="$(cat /tmp/pdown.tmp 2>/dev/null)"
LATEST_RELEASE=$(cat /tmp/ltrwr.tmp 2>/dev/null)
INSTALLED_RELEASE="$(cat /tmp/rnwr.tmp 2</dev/null)"

# does not copy
if [[ "$INSTALLED_RELEASE" -eq "$LATEST_RELEASE" ]] &>/dev/null; then
  NEW_RELEASE="!"
else
  NEW_RELEASE=""
fi

# if online
if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
  NODE_STATUS="Online"
else
  NODE_STATUS="Offline"
fi

# if zero
if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
  PIDOF_WART_NODE="null"
fi

################################################################################

# get process start time from /proc/[PID]/stat (22nd field)
START_TIME=$(awk '{print $22}' /proc/$PIDOF_WART_NODE/stat)
# get system uptime in clock ticks
UPTIME_TICKS=$(getconf CLK_TCK)
# convert start time to seconds
START_TIME_SECONDS=$((START_TIME / UPTIME_TICKS))
# get total system uptime in seconds
SYSTEM_UPTIME=$(awk '{print $1}' /proc/uptime | cut -d. -f1)
# format output in hours, minutes and seconds
UPTIME_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)/3600")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%3600/60")) $(("$(echo "${SYSTEM_UPTIME:?}" 2>&1)%60")))

################################################################################

TITLE="Wart-Node"
MENU="Node...: v$INSTALLED_RELEASE Latest: v$LATEST_RELEASE $NEW_RELEASE
Status.: $NODE_STATUS PID: $PIDOF_WART_NODE
Uptime.: $UPTIME_FORMATTED
Load...: $(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"
CHOICE_HEIGHT="4"
HEIGHT="13"
WIDTH="42"

OPTIONS=(
  1 "Start            Run wart-node"
  2 "Stop             Kill wart-node"
  3 "Update           Update node")

CHOICE=$(dialog --clear \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in
"1")
  # if zero
  if [[ -z "$PIDOF_WART_NODE" ]] &>/dev/null; then
    sudo service wart-node start
  else
    echo "Already running!"
    sleep 1
  fi
  ;;
"2")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # stop wart-node
    sudo service wart-node stop
  else
    echo "Nothing to stop!"
    sleep 1
  fi
  ;;
"3")
  # if any data
  if [[ -n "$PIDOF_WART_NODE" ]] &>/dev/null; then
    # stop wart-node
    sudo service wart-node stop
  fi
  # start counting (seconds)
  START="$SECONDS"
  # change directory, ninja, -jall_threads-1 buffer thread
  cd || exit && cd Warthog && git pull && cd build || exit && ninja -j"$(echo "$(cat /proc/cpuinfo 2>/dev/null | grep -c "processor")-1" | bc 2>/dev/null)"
  # seconds since start
  DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
  # convert seconds
  TIMER_FORMATTED=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
  read -r -p "Duration: $TIMER_FORMATTED - Press Enter to continue" </dev/tty
  ;;
esac

# END
