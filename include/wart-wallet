#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config

# function to print wallet balance #############################################
print_balance() {
  # balance
  RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -b 2>/dev/null)"
  # if zero
  if [[ -z "$RESULT" ]] &>/dev/null; then
    RESULT="Please wait for the node!"
  else
    RESULT="Balance: $RESULT WART"
  fi
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$RESULT" 5 "$(echo "4+$(echo "$RESULT" | wc -L)" | bc 2>/dev/null)"
  }
  display_result
}

# function to print wallet address #############################################
print_address() {
  # address
  RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -a 2>/dev/null)"
  # if zero
  if [[ -z "$RESULT" ]] &>/dev/null; then
    RESULT="Please wait for the node!"
  else
    RESULT="Address: $RESULT"
  fi
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$RESULT" 5 "$(echo "4+$(echo $RESULT | wc -L)" | bc 2>/dev/null)"
  }
  display_result
}

# function to send transaction #################################################
send_tx() {
  # prompt user send transaction
  if dialog --stdout --title "Send transaction?" \
    --backtitle "Sending transaction!" \
    --yesno "Yes: Send! No: Go back!" 5 30; then

    # input address
    RECEIPENT_ADDRESS=$(
      dialog --title "Address" \
        --inputbox "Enter Address:" 8 40 \
        3>&1 1>&2 2>&3 3>&-
    )
    # input amount
    RECEIPENT_AMOUNT=$(
      dialog --title "Amount" \
        --inputbox "Enter Amount:" 8 40 \
        3>&1 1>&2 2>&3 3>&-
    ) # input fee
    RECEIPENT_FEE=$(
      dialog --title "FEE" \
        --inputbox "Enter Fee:" 8 40 \
        3>&1 1>&2 2>&3 3>&-
    ) # input nonce
    RECEIPENT_NONCE=$(
      dialog --title "nonce" \
        --inputbox "Enter nonce:" 8 40 \
        3>&1 1>&2 2>&3 3>&-
    )

    # if zero
    if [[ -z "$RECEIPENT_ADDRESS" || -z "$RECEIPENT_AMOUNT" || -z "$RECEIPENT_FEE" ]] &>/dev/null; then
      break
    fi

    # help
    RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -s --to="$RECEIPENT_ADDRESS" --amount="$RECEIPENT_AMOUNT" --fee="$RECEIPENT_FEE" --nonce="$RECEIPENT_NONCE")"
    # display function
    display_result() {
      dialog --title "$BACKTITLE" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }
    display_result
  fi
}

# function for wallet files ####################################################
wallet_files() {
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$(
        echo "$(
          ls -lRt "$WARTHOG_CHAIN"
          ls -lRt "$WARTHOG_PEERS"
          echo
          ls -lRt "$WARTHOG_DIR"/wallet/
          echo
          ls -lRt "$WARTHOG_DIR"/node/
          echo
        )"
      )" 0 0
  }
  display_result
}

# function for create wallet ###################################################
create_wallet() {
  # prompt user create new wallet
  if dialog --stdout --title "Create new wallet?" \
    --backtitle "Creating new wallet!" \
    --yesno "Yes: Create! No: Return!" 5 30; then
    # help
    RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -c)"
    # display function
    display_result() {
      dialog --title "$BACKTITLE" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }
    display_result
  fi
}

# function to restore wallet ###################################################
restore_wallet() {
  # prompt user create new wallet
  if dialog --stdout --title "Restore old wallet?" \
    --backtitle "Restoring old wallet!" \
    --yesno "Yes: Restore! No: Return!" 5 30; then

    # input private key
    PRIVATEKEY=$(
      dialog --title "Privatekey" \
        --inputbox "Enter privatekey:" 8 40 \
        3>&1 1>&2 2>&3 3>&-
    )

    # if zero
    if [[ -z "$PRIVATEKEY" ]] &>/dev/null; then
      break
    fi

    # help
    RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -r --restore="$PRIVATEKEY")"
    # display function
    display_result() {
      dialog --title "$BACKTITLE" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }
    display_result
  fi
}

# function to display help #####################################################
print_help() {
  # help
  RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" --help)"
  # display function
  display_result() {
    dialog --title "$BACKTITLE" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }
  display_result
}

# menu #########################################################################
HEIGHT="14"
WIDTH="28"
CHOICE_HEIGHT="14"
BACKTITLE="Warthog Wallet"
TITLE="Wart-Wallet"
MENU="Load: $(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"

OPTIONS=(
  1 "Wallet balance"
  2 "Wallet address"
  3 "Send transaction"
  4 "Wallet files"
  5 "Create wallet"
  6 "Restore wallet"
  7 "Help")

CHOICE=$(dialog --clear \
  --backtitle "$BACKTITLE" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in
"1") print_balance ;;  # print wallet balance
"2") print_address ;;  # print wallet address
"3") send_tx ;;        # send transaction
"4") wallet_files ;;   # wallet files
"5") create_wallet ;;  # create new wallet
"6") restore_wallet ;; # restore old wallet
"7") print_help ;;     # print help commands
"*") break ;;
esac

# END
