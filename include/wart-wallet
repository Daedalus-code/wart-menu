#!/bin/bash

# do not edit below ############################################################

source /etc/wart-menu/wart.config
source /etc/wart-menu/include/color

# default
WIDTH="0"
LENGTH="0"

if_zero() {
  if [[ -z "$RESULT" ]] &>/dev/null; then
    RESULT="Node is not running!"
    WIDTH="25"
    LENGTH="5"
  fi
}

# cryptocurrency and currency ##################################################

wart_price() {
  # check last price age
  PRICE_FILE="/tmp/prcwrt.tmp"
  # if found
  if [ -f "$PRICE_FILE" ]; then
    PRICE_AGE="$(($(date +%s) - $(stat -c '%Y' "$PRICE_FILE")))"
  else
    PRICE_AGE="9999" # assume it's too old if the file doesn't exist
  fi
  # if the file is missing or the data is older than 420 seconds, fetch new price
  if [ ! -f "$PRICE_FILE" ] || [ "$PRICE_AGE" -gt "420" ]; then
    CRYPTO="warthog"
    CURRENCY="usd"
    # fetch the latest price from the coingecko api
    PRICE=$(timeout 10 curl -s "https://api.coingecko.com/api/v3/simple/price?ids=$CRYPTO&vs_currencies=$CURRENCY" | jq -r ".$CRYPTO.$CURRENCY")
    # if the api returned a valid price, update the cache
    if [ -n "$PRICE" ] && [ "$PRICE" != "null" ]; then
      echo "$PRICE" >"$PRICE_FILE"
    fi
  fi
  # read the (possibly updated) cached price
  WART_PRICE=$(cat "$PRICE_FILE" 2>/dev/null)
}

# function to print wallet balance #############################################
print_balance() {
  # fetch wart price
  wart_price
  # balance
  WART_BALANCE="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -b 2>/dev/null)"
  # calculate balance value
  WART_VALUE="$(echo "$WART_BALANCE*$WART_PRICE" | bc -l 2>/dev/null | awk '{ printf "%.2f\n", $1 }')"
  # if zero
  if [[ -z "$WART_BALANCE" ]] &>/dev/null; then
    HEIGHT="5"
    RESULT="Node is not running!"
  else
    HEIGHT="7"
    RESULT="Balance : $WART_BALANCE WART
Value : $WART_VALUE USD
Price : $WART_PRICE USD"
  fi
  dialog --title "Wallet balance" \
    --no-collapse \
    --msgbox "$(echo "$RESULT" | column -t)" "$HEIGHT" "$(echo "10+$(echo "$RESULT" | wc -L)" | bc 2>/dev/null)"
}

# function to print wallet address #############################################
print_address() {
  # address
  RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -a 2>/dev/null)"
  # if zero
  if [[ -z "$RESULT" ]] &>/dev/null; then
    RESULT="Node is not running!"
  else
    RESULT="Address: $RESULT"
  fi
  # wallet address dialog
  dialog --title "Wallet Address" \
    --no-collapse \
    --msgbox "$RESULT" 5 "$(echo "4+$(echo $RESULT | wc -L)" | bc 2>/dev/null)"
}

# function to send transaction #################################################
send_tx() {
  # prompt user send transaction
  if dialog --stdout --title "Send transaction?" --backtitle "Sending transaction!" \
    --yesno "Yes: Send! No: Go back!" 5 28; then

    # if node is running
    if [[ "$(pidof wart-node 2>/dev/null | wc -l)" -gt "0" ]] &>/dev/null; then

      RECEIPENT_ADDRESS=$(dialog --title "Address" --inputbox "Enter Address:" 8 40 3>&1 1>&2 2>&3 3>&-)
      RECEIPENT_AMOUNT=$(dialog --title "Amount" --inputbox "Enter Amount:" 8 40 3>&1 1>&2 2>&3 3>&-)
      RECEIPENT_FEE=$(dialog --title "FEE" --inputbox "Enter Fee:" 8 40 3>&1 1>&2 2>&3 3>&-)
      RECEIPENT_NONCE=$(dialog --title "nonce" --inputbox "Enter nonce:" 8 40 3>&1 1>&2 2>&3 3>&-)
    fi

    # if zero
    if [[ -z "$RECEIPENT_ADDRESS" || -z "$RECEIPENT_AMOUNT" || -z "$RECEIPENT_FEE" ]] &>/dev/null; then
      RESULT="Node is not running!"
    else
      # send
      RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -s --to="$RECEIPENT_ADDRESS" --amount="$RECEIPENT_AMOUNT" --fee="$RECEIPENT_FEE" --nonce="$RECEIPENT_NONCE")"
    fi

    # send coins dialog
    dialog --title "Send coins" \
      --no-collapse \
      --msgbox "$RESULT" 5 "$(echo "4+$(echo $RESULT | wc -L)" | bc 2>/dev/null)"
  fi
}

# function for wallet files ####################################################
wallet_files() {
  RESULT="$(
    echo "$(
      ls -lRt "$WARTHOG_CHAIN"
      ls -lRt "$WARTHOG_PEERS"
      echo
      ls -lRt "$WARTHOG_DIR"/wallet/
      echo
      ls -lRt "$WARTHOG_DIR"/node/
      echo
    )"
  )"
  # if zero
  if_zero
  # wallet files dialog
  dialog --title "Wallet files" \
    --no-collapse \
    --msgbox "$RESULT" "$LENGTH" "$WIDTH"
}

# function for create wallet ###################################################
create_wallet() {
  # prompt user create new wallet
  if dialog --stdout --title "Create new wallet?" --backtitle "Creating new wallet!" \
    --yesno "Yes: Create! No: Return!" 5 30; then
    # create wallet
    RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -c)"
    # if zero
    if_zero
    # create wallet dialog
    dialog --title "Create wallet" \
      --no-collapse \
      --msgbox "$RESULT" "$LENGTH" "$WIDTH"
  fi
}

# function to restore wallet ###################################################
restore_wallet() {
  # prompt user create new wallet
  if dialog --stdout --title "Restore old wallet?" --backtitle "Restoring old wallet!" \
    --yesno "Yes: Restore! No: Return!" 5 30; then

    # input private key
    PRIVATEKEY=$(dialog --title "Privatekey" --inputbox "Enter privatekey:" 8 40 3>&1 1>&2 2>&3 3>&-)

    # if zero
    if [[ -z "$PRIVATEKEY" ]] &>/dev/null; then
      printf '%b' "[${R1}!!${N0}] No key!\n"
      break
    fi

    # restore privatekey
    RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -r --restore="$PRIVATEKEY")"
    # if zero
    if_zero
    # restore wallet dialog
    dialog --title "Restore wallet" \
      --no-collapse \
      --msgbox "$RESULT" "$LENGTH" "$WIDTH"
  fi
}

# function to display help #####################################################
print_help() {
  # help
  RESULT="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" --help)"
  # if zero
  if_zero
  # wallet help
  dialog --title "Wallet help" \
    --no-collapse \
    --msgbox "$RESULT" "$LENGTH" "$WIDTH"
}

# function for last transactions ###############################################
last_tx() {
  # address
  WARTHOG_ADDRESS="$("$WARTHOG_DIR"/wallet/./wart-wallet --file="$WARTHOG_JSON" -a 2>/dev/null)"
  # last tx
  RESULT="$(curl -s "$WARTHOG_API"/account/"$WARTHOG_ADDRESS"/history/99999999 2>/dev/null | tr -d ',"' | egrep -w "amount:|toAddress:|fromAddress:|txHash:|fee:|{" | tr -d '{' | egrep -v "data:|transactions:" | tr -d '       ' | cat -s)"
  # count
  COUNT="$(echo "$RESULT" | grep -c "amount")"
  # max lines
  RESULT="$(echo "$RESULT" | head -250)"
  # default
  TITLE="Transactions +$COUNT"
  WIDTH="77"
  LENGTH="40"
  # if zero
  if_zero
  # transactions dialog
  dialog --title "$TITLE" \
    --no-collapse \
    --msgbox "$RESULT" "$LENGTH" "$WIDTH"
}

# menu #########################################################################
HEIGHT="15"
WIDTH="27"
CHOICE_HEIGHT="15"
TITLE="Wart-Wallet"
MENU="Load: $(awk '{ print $1,$2,$3 }' /proc/loadavg 2>/dev/null)"

OPTIONS=(
  1 "Wallet balance"
  2 "Wallet address"
  3 "Send"
  4 "Last TX"
  5 "Wallet files"
  6 "Create wallet"
  7 "Restore wallet"
  8 "Help")

CHOICE=$(dialog --clear \
  --backtitle "Wallet" \
  --title "$TITLE" \
  --menu "$MENU" \
  $HEIGHT $WIDTH $CHOICE_HEIGHT \
  "${OPTIONS[@]}" \
  2>&1 >/dev/tty)

clear
case $CHOICE in
"1") print_balance ;;  # print wallet balance
"2") print_address ;;  # print wallet address
"3") send_tx ;;        # send transaction
"4") last_tx ;;        # last transaction
"5") wallet_files ;;   # wallet files
"6") create_wallet ;;  # create new wallet
"7") restore_wallet ;; # restore old wallet
"8") print_help ;;     # print help commands
"*") break ;;
esac

# END
